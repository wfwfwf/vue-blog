(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{756:function(t,n,e){},802:function(t,n,e){"use strict";var s=e(756);e.n(s).a},813:function(t,n,e){"use strict";e.r(n);var s=e(57),a={name:"component-doc",components:{"render-demo-0":Object(s.a)({render:function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",[[e("div",{staticClass:"hello"},[e("h3",[t._v(t._s(t.msg))]),t._v(" "),e("p",{staticClass:"doc"},[t._v("\n      已经全局引入了element-ui\n    ")]),t._v(" "),e("el-input",{model:{value:t.txt,callback:function(n){t.txt=n},expression:"txt"}}),t._v(" "),e("br"),t._v(" "),e("div",[t._v(t._s(t.txt))])],1)]],2)},staticRenderFns:[]},{name:"HelloWorld",data:function(){return{msg:"Hello Word",txt:""}},methods:{}})}},r=(e(802),e(5)),o=Object(r.a)(a,(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前要"}},[t._v("#")]),t._v(" 前要")]),t._v(" "),e("p",[t._v("在项目中，组件我们通常要写很多，但每个组件怎么用，一般不会去类似element-ui的说明文档。所以新人接手时，要不就是直接忽略掉了通用组件，要不就是要看半天才知道一个复杂的组件怎么用。")]),t._v(" "),e("p",[t._v("在19年上半年，我写了一个小组件库，目的是为了统一公司多个工程的通用组件以及样式，并且给出说明文档。　"),e("a",{attrs:{href:"https://github.com/wfwfwf/td-addon",target:"_blank",rel:"noopener noreferrer"}},[t._v("组件地址"),e("OutboundLink")],1),t._v("\n但这个小组件库的说明文档有点问题，同一个页面，只能允许一个vue。")]),t._v(" "),e("p",[t._v("最近整理自己的东西时，发现以前写的东西都有一些零碎，也没有一个统一的地方存放，所以采用vuepress写了一个博客，并且在这里实现了类似element-ui可以看到代码效果的说明文档。")]),t._v(" "),e("h1",{attrs:{id:"内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),e("h2",{attrs:{id:"看一下效果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#看一下效果"}},[t._v("#")]),t._v(" 看一下效果")]),t._v(" "),e("demo-block",{attrs:{options:JSON.parse(decodeURI("%7B%7D"))}},[e("template",{slot:"demo"},[[e("render-demo-0")]],2),t._v(" "),e("template",{slot:"source"},[e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ msg }}"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("doc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      已经全局引入了element-ui\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("el-input")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-model")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("txt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("br")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{txt}}"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}},[e("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HelloWorld'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      msg"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello Word'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      txt"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  methods"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("style")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token style"}},[e("span",{pre:!0,attrs:{class:"token language-css"}},[t._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("h3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 40px 0 0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".doc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" #42b983"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("style")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n")])])])])],2),e("h2",{attrs:{id:"原理说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理说明"}},[t._v("#")]),t._v(" 原理说明")]),t._v(" "),e("p",[t._v("vuepress是支持在markdown文件里面直接写vue代码的，那么我们要实现代码和代码效果共存时，最简单的办法，把代码写两份，一份放在pre 里展示代码, 一份直接用来展示效果。\n人类的进步很大一部分是原因是来源于偷懒，不想一份代码写两遍，copy一下，也让文档不好看。偷懒的方法来了，继续往下看：")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("方法一：")])]),e("p",[t._v("\n借助 Vuepress 会自动注册 components 目录下组件的特性，或者通过 enhanceApp.js 钩子自己注册示例代码文件，然后使用 <<< @/filepath 语法将示例代码文件引入\n这个方法不好的地方在于组件需要全局注册\n")]),e("p"),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<color-picker-basic-demo></color-picker-basic-demo>\n## 示例代码如下\n```html\n<<< @/docs/.vuepress/components/color-picker-basic-demo.vue\n")])])]),e("p",[e("strong",[t._v("方法二：")])]),e("p",[t._v("\nvuepress 也是有生命周期的，我们可以写一个vuepress插件，在插件里把代码进行拆分组装后，按格式存放在data-里面，然后在vuepress的更新时，使用vue.extend创建实例，并挂载到一个对应的元素上。可以在git 上搜一下vuepress-plugin-demo-block-master　，这个哥们就是用的这种方法\n")]),e("p"),t._v(" "),e("p",[e("strong",[t._v("方法三：")])]),e("p",[t._v("\n一步到位，在vuepress插件里，先将代码块作为vue组件进行编译，再把编译后的组件插入页面里面。代码看　/docs/.vuepress/plugins/demo里面。\n")]),e("p"),t._v(" "),e("p",[t._v("##　主代码")]),t._v(" "),e("p",[t._v("在config.js里面引入插件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[require('./plugins/demo/')]\n")])])]),e("p",[t._v("plugins/demo/index代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n * 提供 ::: demo xxx ::: 语法，用于构建 markdown 中的示例\n */\nconst path = require('path')\nconst renderDemoBlock = require('./render')\nconst demoBlockContainers = require('./containers')\nmodule.exports = (options = {}, ctx) => {\n  return {\n    chainMarkdown(config) {\n      config.plugin('containers')\n        .use(demoBlockContainers(options))\n        .end();\n    },\n    extendMarkdown: md => {\n      const id = setInterval(() => {\n        const render = md.render;\n        if (typeof render.call(md, '') === 'object') {\n          md.render = (...args) => {\n            let result = render.call(md, ...args);\n            const { template, script, style } = renderDemoBlock(result.html);\n            result.html = template;\n            result.dataBlockString = `${script}\\n${style}\\n${result.dataBlockString}`;\n            return result;\n          }\n          clearInterval(id);\n        }\n      }, 10);\n    }\n  }\n}\n")])])]),e("p",[t._v("plugins/demo/render代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const {\n  stripScript,\n  stripStyle,\n  stripTemplate,\n  genInlineComponentText\n} = require('./util.js');\n\nmodule.exports = function (content) {\n  if (!content) {\n    return content\n  }\n  const startTag = '\x3c!--pre-render-demo:';\n  const startTagLen = startTag.length;\n  const endTag = ':pre-render-demo--\x3e';\n  const endTagLen = endTag.length;\n\n  let componenetsString = ''; // 组件引用代码\n  let templateArr = []; // 模板输出内容\n  let styleArr = []; // 样式输出内容\n  let id = 0; // demo 的 id\n  let start = 0; // 字符串开始位置\n  let commentStart = content.indexOf(startTag);\n  let commentEnd = content.indexOf(endTag, commentStart + startTagLen);\n  while (commentStart !== -1 && commentEnd !== -1) {\n    templateArr.push(content.slice(start, commentStart));\n    const commentContent = content.slice(commentStart + startTagLen, commentEnd);\n    const html = stripTemplate(commentContent);\n    const script = stripScript(commentContent);\n    const style = stripStyle(commentContent);\n    const demoComponentContent = genInlineComponentText(html, script); // 示例组件代码内容\n    const demoComponentName = `render-demo-${id}`; // 示例代码组件名称\n    templateArr.push(`<template><${demoComponentName} /></template>`);\n    styleArr.push(style);\n    componenetsString += `${JSON.stringify(demoComponentName)}: ${demoComponentContent},`;\n    // 重新计算下一次的位置\n    id++;\n    start = commentEnd + endTagLen;\n    commentStart = content.indexOf(startTag, start);\n    commentEnd = content.indexOf(endTag, commentStart + startTagLen);\n  }\n  // 仅允许在 demo 不存在时，才可以在 Markdown 中写 script 标签\n  // todo: 优化这段逻辑\n  let pageScript = '';\n  if (componenetsString) {\n    pageScript = `<script>\n      export default {\n        name: 'component-doc',\n        components: {\n          ${componenetsString}\n        }\n      }\n    <\/script>`;\n  } else if (content.indexOf('<script>') === 0) { // 硬编码，有待改善\n    start = content.indexOf('<\/script>') + '<\/script>'.length;\n    pageScript = content.slice(0, start);\n  }\n  // 合并 style 内容\n  let styleString = '';\n  if(styleArr && styleArr.length > 0) {\n    styleString = `<style>${styleArr.join('')}</style>`\n  } else {\n    styleString = `<style></style>`\n  }\n  templateArr.push(content.slice(start));\n  return {\n    template: templateArr.join(''),\n    script: pageScript,\n    style: styleString\n  }\n};\n")])])]),e("p",[t._v("plugins/demo/fence代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 覆盖默认的 fence 渲染策略\nmodule.exports = md => {\n  const defaultRender = md.renderer.rules.fence;\n  md.renderer.rules.fence = (tokens, idx, options, env, self) => {\n    const token = tokens[idx];\n    // 判断该 fence 是否在 :::demo 内\n    const prevToken = tokens[idx - 1];\n    const isInDemoContainer = prevToken && prevToken.nesting === 1 && prevToken.info.trim().match(/^demo\\s*(.*)$/);\n    if (token.info === 'html' && isInDemoContainer) {\n      return `<template><pre><code class=\"html\">${md.utils.escapeHtml(token.content)}</code></pre></template>`;\n    }\n    return defaultRender(tokens, idx, options, env, self);\n  };\n};\n")])])]),e("p",[t._v("plugins/demo/util代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const { compileTemplate } = require('@vue/component-compiler-utils');\nconst compiler = require('vue-template-compiler');\n\nfunction stripScript(content) {\n  const result = content.match(/<(script)>([\\s\\S]+)<\\/\\1>/);\n  return result && result[2] ? result[2].trim() : '';\n}\n\nfunction stripStyle(content) {\n  const result = content.match(/<(style)\\s*>([\\s\\S]+)<\\/\\1>/);\n  return result && result[2] ? result[2].trim() : '';\n}\n\n// 编写例子时不一定有 template。所以采取的方案是剔除其他的内容\nfunction stripTemplate(content) {\n  content = content.trim();\n  if (!content) {\n    return content;\n  }\n  return content.replace(/<(script|style)[\\s\\S]+<\\/\\1>/g, '').trim();\n}\n\nfunction pad(source) {\n  return source\n    .split(/\\r?\\n/)\n    .map(line => `  ${line}`)\n    .join('\\n');\n}\n\nfunction genInlineComponentText(template, script) {\n  // https://github.com/vuejs/vue-loader/blob/423b8341ab368c2117931e909e2da9af74503635/lib/loaders/templateLoader.js#L46\n  const finalOptions = {\n    source: `<div>${template}</div>`,\n    filename: 'inline-component', // TODO：这里有待调整\n    compiler\n  };\n  const compiled = compileTemplate(finalOptions);\n  // tips\n  if (compiled.tips && compiled.tips.length) {\n    compiled.tips.forEach(tip => {\n      console.warn(tip);\n    });\n  }\n  // errors\n  if (compiled.errors && compiled.errors.length) {\n    console.error(\n      `\\n  Error compiling template:\\n${pad(compiled.source)}\\n` +\n        compiled.errors.map(e => `  - ${e}`).join('\\n') +\n        '\\n'\n    );\n  }\n  let demoComponentContent = `\n    ${compiled.code}\n  `;\n  // todo: 这里采用了硬编码有待改进\n  script = script.trim();\n  if (script) {\n    script = script.replace(/export\\s+default/, 'const democomponentExport =');\n  } else {\n    script = 'const democomponentExport = {}';\n  }\n  demoComponentContent = `(function() {\n    ${demoComponentContent}\n    ${script}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })()`;\n  return demoComponentContent;\n}\n\nmodule.exports = {\n  stripScript,\n  stripStyle,\n  stripTemplate,\n  genInlineComponentText\n};\n")])])]),e("p",[t._v("plugins/demo/containers代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const mdContainer = require('markdown-it-container');\n\nmodule.exports = options => {\n  const {\n    component = 'demo-block'\n  } = options;\n  const componentName = component\n    .replace(/^\\S/, s => s.toLowerCase())\n    .replace(/([A-Z])/g, \"-$1\").toLowerCase();\n  return md => {\n    md.use(mdContainer, 'demo', {\n      validate(params) {\n        return params.trim().match(/^demo\\s*(.*)$/);\n      },\n      render(tokens, idx) {\n        const m = tokens[idx].info.trim().match(/^demo\\s*(.*)$/);\n        if (tokens[idx].nesting === 1) {\n          const description = m && m.length > 1 ? m[1] : '';\n          const content = tokens[idx + 1].type === 'fence' ? tokens[idx + 1].content : '';\n          const encodeOptionsStr = encodeURI(JSON.stringify(options));\n          return `<${componentName} :options=\"JSON.parse(decodeURI('${encodeOptionsStr}'))\">\n            <template slot=\"demo\">\x3c!--pre-render-demo:${content}:pre-render-demo--\x3e</template>\n            ${description ? `<div slot=\"description\">${md.render(description).html}</div>` : ''}\n            <template slot=\"source\">\n          `;\n        }\n        return `</template></${componentName}>`;\n      }\n    });\n  };\n}\n")])])])],1)}),[],!1,null,null,null);n.default=o.exports}}]);